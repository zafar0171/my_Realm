import numpy as np

def calculate(lst):
    if len(lst) != 9:
        raise ValueError("List must contain nine numbers.")
    else:
        matrix = np.array(lst).reshape(3, 3)

        # mean of rows, columns, and elements
        rows_mean = np.mean(matrix, axis=1).tolist()
        cols_mean = np.mean(matrix, axis=0).tolist()
        elements_mean = np.mean(matrix).tolist()

        # variance of rows, columns, and elements
        rows_var = np.var(matrix, axis=1).tolist()
        cols_var = np.var(matrix, axis=0).tolist()
        elements_var = np.var(matrix).tolist()

        # standard deviation of rows, columns, and elements
        rows_std = np.std(matrix, axis=1).tolist()
        cols_std = np.std(matrix, axis=0).tolist()
        elements_std = np.std(matrix).tolist()

        # max of rows, columns, and elements
        rows_max = np.max(matrix, axis=1).tolist()
        cols_max = np.max(matrix, axis=0).tolist()
        elements_max = np.max(matrix).tolist()

        # min of rows, columns, and elements
        rows_min = np.min(matrix, axis=1).tolist()
        cols_min = np.min(matrix, axis=0).tolist()
        elements_min = np.min(matrix).tolist()

        # sum of rows, columns, and elements
        rows_sum = np.sum(matrix, axis=1).tolist()
        cols_sum = np.sum(matrix, axis=0).tolist()
        elements_sum = np.sum(matrix).tolist()

        
        results = {
             "mean": [rows_mean, cols_mean, elements_mean],
             "variance": [rows_var, cols_var, elements_var],
             "standard deviation": [rows_std, cols_std, elements_std],
             "max": [rows_max, cols_max, elements_max],
             "min": [rows_min, cols_min, elements_min],
             "sum": [rows_sum, cols_sum, elements_sum]
                    }
    return results

list1 = [0,1,2,3,4,5,6,7,8]
calculate(list1)
